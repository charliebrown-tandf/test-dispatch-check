name: 'Mock Deploy Action'
description: 'Mock deployment that bumps version number'
author: 'Test Team'

branding:
  icon: 'upload'
  color: 'green'

runs:
  using: 'composite'
  steps:
    - name: Bump Version
      shell: bash
      run: |
        echo "ðŸš€ Starting mock deployment..."
        
        # Read current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Simple increment (patch version)
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        echo "New version: $NEW_VERSION"
        
        # Update package.json
        node -e "
          const pkg = require('./package.json');
          pkg.version = '$NEW_VERSION';
          require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
        "
        
        echo "âœ… Version bumped to $NEW_VERSION"
        echo "ðŸ“¦ Mock deployment completed successfully"
        
        # Store new version for ServiceNow notification
        echo "DEPLOYED_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
    - name: Mock ServiceNow Notification
      shell: bash
      run: |
        echo "ðŸ“§ Sending mock ServiceNow notification..."
        
        # Mock ServiceNow data
        SERVICENOW_PAYLOAD='{
          "subject": "Production Deployment Completed",
          "body": "Application deployed successfully\\nVersion: '$DEPLOYED_VERSION'\\nTimestamp: '$(date -u +'%Y-%m-%d %H:%M:%S UTC')'\\nRepository: '${{ github.repository }}'\\nDeployed by: '${{ github.actor }}'"
        }'
        
        echo "ServiceNow payload:"
        echo "$SERVICENOW_PAYLOAD" | jq .
        
        echo "âœ… Mock ServiceNow notification sent"