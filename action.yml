name: 'Release Governance Check'
description: 'Pre-deployment governance check with impact assessment and audit trail creation'
author: 'Your Organization'

branding:
  icon: 'zap'
  color: 'blue'

inputs:
  no-downtime:
    description: 'I confirm this change does NOT cause downtime'
    required: true

  no-pii-changes:
    description: 'I confirm this change does NOT affect PII data'
    required: true

  change-request:
    description: 'Change Request number (required for major releases)'
    required: false
    default: ''

  tests-verified:
    description: 'Engineer confirms: Tests passed and changes verified'
    required: true

outputs:
  release-type:
    description: 'Type of release (minor or major)'
    value: ${{ steps.check-impact.outputs.release_type }}

  change-request:
    description: 'Change request number (for major releases)'
    value: ${{ steps.validate-cr.outputs.cr_number }}

  governance-approved:
    description: 'Whether governance check passed'
    value: ${{ steps.validate-cr.outcome == 'success' || steps.check-impact.outputs.release_type == 'minor' }}

runs:
  using: 'composite'
  steps:
  - name: Verify Engineer Confirmation
    shell: bash
    run: |
      if [ "${{ inputs.tests-verified }}" != "true" ]; then
        echo "::error::Engineer must confirm tests passed and changes verified"
        exit 1
      fi
      echo "::notice::Engineer confirmed: Tests passed and changes verified"

  - name: Determine Release Type
    id: check-impact
    shell: bash
    run: |
      # Determine release type based on confirmations
      if [ "${{ inputs.no-downtime }}" = "false" ] || [ "${{ inputs.no-pii-changes }}" = "false" ]; then
        echo "release_type=major" >> $GITHUB_OUTPUT
        echo "::notice::Major release detected - downtime or PII impact not ruled out"
      else
        echo "release_type=minor" >> $GITHUB_OUTPUT
        echo "::notice::Minor release - engineer confirmed no downtime or PII impact"
      fi

  - name: Validate Change Request (Major releases only)
    id: validate-cr
    if: steps.check-impact.outputs.release_type == 'major'
    shell: bash
    run: |
      CR_NUMBER="${{ inputs.change-request }}"

      if [ -z "$CR_NUMBER" ]; then
        echo "::error::Major release requires Change Request number"
        exit 1
      fi

      echo "::notice::Change Request: $CR_NUMBER"
      echo "cr_number=$CR_NUMBER" >> $GITHUB_OUTPUT

  - name: Governance Check Complete
    shell: bash
    run: |
      RELEASE_TYPE="${{ steps.check-impact.outputs.release_type }}"

      if [ "$RELEASE_TYPE" = "major" ]; then
        echo "âœ… Major release approved with Change Request: ${{ steps.validate-cr.outputs.cr_number }}"
      else
        echo "âœ… Minor release approved - deployment may proceed"
      fi

      echo "::notice::Governance check passed - deployment authorized"

  - name: Create Governance Audit Record
    shell: bash
    run: |
      RELEASE_TYPE="${{ steps.check-impact.outputs.release_type }}"
      TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

      # Create JSON audit record
      cat > governance-record.json << EOF
      {
        "release_type": "$RELEASE_TYPE",
        "deployed_by": "${{ github.actor }}",
        "timestamp": "$TIMESTAMP",
        "commit": "${{ github.sha }}",
        "no_downtime_confirmed": ${{ inputs.no-downtime }},
        "no_pii_changes_confirmed": ${{ inputs.no-pii-changes }},
        "tests_verified": ${{ inputs.tests-verified }},
        "change_request": "${{ steps.validate-cr.outputs.cr_number }}",
        "repository": "${{ github.repository }}",
        "workflow": "${{ github.workflow }}",
        "run_id": "${{ github.run_id }}",
        "run_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      }
      EOF

      echo "ðŸ“‹ Governance record created: governance-record.json"

  - name: Upload Governance Audit Record
    uses: actions/upload-artifact@v4
    with:
      name: governance-record-${{ github.run_id }}
      path: governance-record.json
      retention-days: 180 # 6 months

  - name: Mock ServiceNow Notification
    shell: bash
    run: |
      RELEASE_TYPE="${{ steps.check-impact.outputs.release_type }}"
      echo "ðŸ“§ Sending ServiceNow notification..."

      SERVICENOW_PAYLOAD=$(cat << EOF
      {
        "subject": "Production Deployment - $RELEASE_TYPE Release",
        "body": "Deployment authorized and proceeding\\n\\nRelease Type: $RELEASE_TYPE\\nDeployed by: ${{ github.actor }}\\nTimestamp: $(date -u +'%Y-%m-%d %H:%M:%S UTC')\\nRepository: ${{ github.repository }}\\nCommit: ${{ github.sha }}\\nWorkflow: ${{ github.workflow }}\\nRun: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      }
      EOF
      )

      echo "ServiceNow notification payload:"
      echo "$SERVICENOW_PAYLOAD" | jq .
      echo "âœ… Mock ServiceNow notification sent"
